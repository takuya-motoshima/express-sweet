{{!< default}}
{{#contentFor 'title'}}Authentication Overview{{/contentFor}}
{{#contentFor 'sidenav'}}
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#overview" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Overview</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#configuration" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Configuration</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
{{/contentFor}}
<!--begin::Section-->
<div class="pb-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="overview" data-kt-scroll-offset="100">
    <a href="#overview"></a>Authentication
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">
    Express Sweet has built-in passport authentication middleware for user authentication by username and password.<br>
    You can immediately start user authentication in your application using the authentication configuration file and the authentication service module.<br><br>
    For more information about <code>passport</code>, click <a href="https://www.passportjs.org/" class="fw-semibold" target="_blank">here</a>.
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="py-5">
    <!--begin::Notice-->
    <div class="notice d-flex align-items-center bg-light-primary rounded min-w-lg-600px flex-shrink-0 p-6">
      <!--begin::Icon-->
      <i class="ki-duotone ki-information-3 fs-2tx text-primary me-4">
        <span class="path1"></span><span class="path2"></span><span class="path3"></span>
      </i>
      <!--end::Icon-->
      <!--begin::Description-->
      <div class="text-gray-700 fw-bold fs-6">
        If an unauthenticated user makes a request to a URL that allows access only if authenticated, the user will be redirected to the page specified by <code>failure_redirect</code>.<br>
        If that access is asynchronous, a <code>401</code> error is returned.
      </div>
      <!--end::Description-->
    </div>
    <!--end::Notice-->
  </div>
  <!--end::Block-->
</div>
<!--end::Section-->
<!--begin::Section-->
<div class="pb-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="configuration" data-kt-scroll-offset="100">
    <a href="#configuration"></a>Configuration
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">The user authentication configuration is defined in the <code>config/authentication.js</code> file.</div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="py-5">
    <!--begin::Notice-->
    <div class="notice d-flex align-items-center bg-light-primary rounded min-w-lg-600px flex-shrink-0 p-6">
      <!--begin::Icon-->
      <i class="ki-duotone ki-information-3 fs-2tx text-primary me-4">
        <span class="path1"></span><span class="path2"></span><span class="path3"></span>
      </i>
      <!--end::Icon-->
      <!--begin::Description-->
      <div class="text-gray-700 fw-bold fs-6">
        Click <a href="download/templates/esm/authentication.js" class="fw-semibold" download="authentication.js">here</a> to download a sample <span class="fw-bolder">ESM</span> configuration and<br>
        <a href="download/templates/cjs/authentication.js" class="fw-semibold" download="authentication.js">here</a> to download a sample <span class="fw-bolder">CJS</span> configuration.
      </div>
      <!--end::Description-->
    </div>
    <!--end::Notice-->
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="py-5">
    <!--begin::Heading-->
    <div class="fs-2 py-5">Explanation of Values</div>
    <!--end::Heading-->
    <!--begin::Table wrapper-->
    <div class="table-responsive">
      <!--begin::Table-->
      <table class="table table-row-bordered mb-0 gy-5">
        <!--begin::Head-->
        <thead>
          <tr class="p-6">
            <th class="min-w-250px">Name Config</th>
            <th>Description</th>
          </tr>
        </thead>
        <!--end::Head-->
        <!--begin::Body-->
        <tbody>
          <tr>
            <td><code>enabled: boolean</code></td>
            <td>
              Set to true to enable user authentication using <a href="https://www.passportjs.org/docs/" class="fw-semibold" target="_blank">Passport middleware</a>.<br>
              User authentication is enabled (<code>true</code>) by default.
            </td>
          </tr>
          <tr>
            <td><code>session_store: &#039;memory&#039;|&#039;redis&#039;</code></td>
            <td>The session store instance, defaults to a new MemoryStore(<code>memory</code>) instance.</td>
          </tr>
          <tr>
            <td><code>cookie_name?: string|undefined</code></td>
            <td>
              The name of the session ID cookie to set in the response (and read from in the request).<br>
              The default value is <code>connect.sid<code>.
            </td>
          </tr>
          <tr>
            <td><code>cookie_secure?: boolean|undefined</code></td>
            <td>
              Specifies the boolean value for the <code>Secure</code> Set-Cookie attribute.<br>
              The default is <code>true</code>, which sets the <code>Secure</code> attribute on the cookie.
            </td>
          </tr>
          <tr>
            <td><code>cookie_httpOnly?: boolean|undefined</code></td>
            <td>
              Specifies the boolean value for the <code>HttpOnly</code> Set-Cookie attribute.<br>
              Defaults to <code>true</code>, which sets the <code>HttpOnly</code> attribute on the cookie.
            </td>
          </tr>
          <tr>
            <td><code>redis_host?: string|undefined</code></td>
            <td>
              If the session is stored in <code>&quot;redis&quot;</code>, this field is required and should be set to the hostname of the Redis server.<br>
              For example, to connect to redis on localhost on port <code>6379</code>, set <code>&quot;redis://localhost:6379&quot;</code>.<br>
              To connect to a different host or port, use a connection string in the format <code>&quot;redis[s]://[[username][:password]@][host][:port][/db-number]&quot;</code>.<br>
              For example, <code>&quot;redis://alice:foobared@awesome.redis.server:6380&quot;</code>.
            </td>
          </tr>
          <tr>
            <td><code>username: string</code></td>
            <td>
              The login username field name used for authentication.<br>
              This should be set to the same value as the user field name in the POST body sent to the server and the user example name in the login user table.
            </td>
          </tr>
          <tr>
            <td><code>password: string</code></td>
            <td>
              The login password field name used for authentication.<br>
              This should be set to the same value as the password field name in the POST body sent to the server and the password column name in the login user table.
            </td>
          </tr>
          <tr>
            <td><code>success_redirect: string</code></td>
            <td>
              The URL to redirect to after successful authentication.<br>
              The default is the root URL (<code>/</code>).
            </td>
          </tr>
          <tr>
            <td><code>failure_redirect: string|((req: express.Request, res: express.Response) =&gt; string)</code></td>
            <td>
              Specify the URL to redirect after logging out, or the URL to redirect when the logoff user requests a URL that only the logged-in user can access.<br>
              This usually specifies the URL of the login page.<br>
              The default is <code>/login</code>.
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">// Set the URL to redirect to in case of login failure as a string.
failure_redirect: &#039;/login&#039;,

// Dynamically set the url to redirect to on login failure.
failure_redirect: (req, res) =&gt; {
  // If the role stored in the cookie is admin, redirect to the admin login screen.
  return req.cookies.role === &#039;admin&#039; ? &#039;/adminlogin&#039; : &#039;login&#039;;
},</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
          <tr>
            <td><code>authenticate_user: (username: string, password: string, req: express.Request): Promise&lt;object|null&gt;</code></td>
            <td>
              This hook is called when authenticating a user.<br>
              Please find the user information that owns the credentials based on the user name and password you received and return it.<br>
              If the user who owns the credentials cannot be found, return null.
              <!--begin::Block-->
              <div class="py-5">
                <!--begin::Notice-->
                <div class="notice d-flex align-items-center bg-light-primary rounded min-w-lg-600px flex-shrink-0 p-6">
                  <!--begin::Icon-->
                  <i class="ki-duotone ki-information-3 fs-2tx text-primary me-4">
                    <span class="path1"></span><span class="path2"></span><span class="path3"></span>
                  </i>
                  <!--end::Icon-->
                  <!--begin::Description-->
                  <div class="text-gray-700 fw-bold fs-6">
                    Note that the user information must include an ID value that can identify the user.
                  </div>
                  <!--end::Description-->
                </div>
                <!--end::Notice-->
              </div>
              <!--end::Block-->
              The following example uses the user model to find the user who owns the credentials based on the username and password.
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">authenticate_user: async (username, password, req) =&gt; {
  const UserModel = require(&#039;../models/UserModel&#039;);
  return UserModel.findOne({
    where: {
      email: username,
      password
    },
    raw: true
  });
}</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
          <tr>
            <td><code>subscribe_user: (id: number): Promise&lt;object&gt;</code></td>
            <td>
              This hook is called when user authentication is successful.<br>
              Please search and return the authenticated user information to be set in the session based on the user ID of the parameter.<br>
              The returned data will be set in the req.user property and the view&#039;s session variable.<br>
              The following example uses the user model to return the user information that owns the credentials based on the authenticated user's id.
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">subscribe_user: async (id) =&gt; {
  const UserModel = require(&#039;../models/UserModel&#039;);
  return UserModel.findOne({
    where: {
      id
    },
    raw: true
  });
}</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
          <tr>
            <td><code>allow_unauthenticated: (string|RegExp)[]</code></td>
            <td>
              By default, it requires an authenticated user for all requests.<br>
              You can use the <code>allow_unauthenticated</code> option to disable this behavior on certain requests.<br>
              For example, if you don’t want to authenticate all requests that contain <code>api</code> in the URL, set <code>allow_unauthenticated</code> as follows.
              <!--begin::Code-->
              <div class="py-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">allow_unauthenticated: [&#039;/api&#039;]</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
              You can also use regular expressions.
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">allow_unauthenticated: [/^\/api/]</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
          <tr>
            <td><code>expiration: number</code></td>
            <td>
              Specifies the time, in milliseconds, before the session expires.<br>
              The default is 24 hours (<code>86400000</code> milliseconds).
            </td>
          </tr>
        </tbody>
        <!--end::Body-->
      </table>
      <!--end::Table-->
    </div>
    <!--end::Table wrapper-->
  </div>
  <!--end::Block-->
</div>
<!--end::Section-->