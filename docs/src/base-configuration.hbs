{{!< default}}
{{#contentFor 'title'}}Base configuration{{/contentFor}}
{{#contentFor 'style'}}
<style>
/*Hide side navigation*/
#kt_app_sidebar_navs {
  display: none;
}
</style>
{{/contentFor}}
<!--begin::Section-->
<div class="pb-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5">Base configuration</h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">The basic configuration of Express Sweet is defined in the <code>config/config.js</code> file.</div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="py-5">
    <!--begin::Notice-->
    <div class="notice d-flex align-items-center bg-light-primary rounded min-w-lg-600px flex-shrink-0 p-6">
      <!--begin::Icon-->
      <i class="ki-duotone ki-information-3 fs-2tx text-primary me-4">
        <span class="path1"></span><span class="path2"></span><span class="path3"></span>
      </i>
      <!--end::Icon-->
      <!--begin::Description-->
      <div class="text-gray-700 fw-bold fs-6">
        Click <a href="download/templates/esm/config.js" class="fw-semibold" download="config.js">here</a> to download a sample <span class="fw-bolder">ESM</span> configuration and<br>
        <a href="download/templates/cjs/config.js" class="fw-semibold" download="config.js">here</a> to download a sample <span class="fw-bolder">CJS</span> configuration.
      </div>
      <!--end::Description-->
    </div>
    <!--end::Notice-->
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="my-5">
    <!--begin::Heading-->
    <div class="fs-2 py-5">Explanation of Values</div>
    <!--end::Heading-->
    <!--begin::Table wrapper-->
    <div class="table-responsive">
      <!--begin::Table-->
      <table class="table table-row-bordered mb-0 gy-5">
        <!--begin::Head-->
        <thead>
          <tr class="p-6">
            <th class="min-w-250px">Name Config</th>
            <th>Description</th>
          </tr>
        </thead>
        <!--end::Head-->
        <!--begin::Body-->
        <tbody>
          <tr>
            <td><code>env_path: string</code></td>
            <td>
              The path to the environment configuration file (<code>.env</code>).<br>
              When you start the Express Sweet application, the contents of the environment configuration file are automatically read and saved in <code>process.env</code>.<br>
              The default is <code>.env</code>.
            </td>
          </tr>
          <tr>
            <td><code>cors_enabled: boolean</code></td>
            <td>Set to true to allow requests from another domain to the application.<br>The default is <code>false</code>.</td>
          </tr>
          <tr>
            <td><code>max_body_size: string|number</code></td>
            <td>
              Controls the maximum request body size.<br>
              If this is a number, then the value specifies the number of bytes.<br>
              if it is a string, the value is passed to the <a href="https://www.npmjs.com/package/bytes" class="fw-semibold" target="_blank">bytes library</a> for parsing.<br>
              The default is 100kb.
            </td>
          </tr>
          <tr>
            <td><code>router_dir: string</code></td>
            <td>The directory path where the routes module is located.<br>The default is the <code>routes</code> directory directly under the application root.</td>
          </tr>
          <tr>
            <td><code>default_router: string</code></td>
            <td>
              Express Sweet can be told to load a default router when a URI is not present, as will be the case when root URL (<code>/</code>) is requested.<br>
              For example, to specify a default route, set <code>default_router</code> as follows.<br>
              Where blog is the name of the router module you want used.<br>
              Next, create the <code>routes/blog.js</code> module.<br><br>
              In the following example, requesting the root URL (<code>/</code>) will result in "Hello World".
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <ul class="nav nav-pills" role="tablist">
                    <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#router-config-esm-tab" role="tab">ESM</a></li>
                    <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#router-config-cjs-tag" role="tab">CJS</a></li>
                  </ul>
                  <div class="tab-content">
                    <div class="tab-pane fade show active" id="router-config-esm-tab" role="tabpanel">
                      <div class="highlight-code">
                        <pre class="language-javascript"><code class="language-javascript">import {Router} from &#039;express&#039;;
const router = Router();

router.get(&#039;/&#039;, (req, res) =&gt; {
  res.send(&#039;Hello World&#039;);
});
export default router;</code></pre>
                      </div>
                    </div>
                    <div class="tab-pane fade" id="router-config-cjs-tag" role="tabpanel">
                      <div class="highlight-code">
                        <pre class="language-javascript"><code class="language-javascript">const express = require(&#039;express&#039;);
const router = express.Router();

router.get(&#039;/&#039;, (req, res) =&gt; {
  res.send(&#039;Hello World&#039;);
});
module.exports = router;</code></pre>
                      </div>
                    </div>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
          <tr>
            <td><code>rewrite_base_url: (baseUrl: string) =&gt; string</code></td>
            <td>
              This is a hook that rewrites the base URL.<br>
              If you want to rewrite the app.locals.baseUrl property and the view&#039;s baseUrl variable, use this hook to return a new base URL.<br>
              The default value is the referrer&#039;s origin (eg https://example.com).<br>
              In this example, <code>https://example.com/admin</code> is used as the base URL.
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">rewrite_base_url: baseUrl =&gt; {
  return `${baseUrl}/admin`;
}</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Block-->
            </td>
          </tr>
          <tr>
            <td><code>is_ajax: (req: express.Request) =&gt; boolean</code></td>
            <td>
              How to determine if it is an ajax request.<br>
              The default is that if there is an XMLHttpRequest in the request header (<code>req.xhr</code>) returns <code>true</code>.<br><br>
              For example, if there is no XMLHttpRequest in req(<code>express.Request</code>) and the Ajax endpoint starts with <code>/api</code>, a custom Ajax decision can be made like &quot;<code>return /^\/api\//.test(req.path)</code>&quot;.<br>
              <!--begin::Block-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">is_ajax: req =&gt; {
  // If the request URL begins with /api, it is assumed to be Ajax.
  return /^\/api/.test(req.path);
  // return !!req.xhr;
}</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
          <tr>
            <td><code>hook_handle_error: (err: any, req: express.Request, res: express.Response, next: express.NextFunction) =&gt; void</code></td>
            <td>
              Hooks the default behavior on request errors.<br>
              If unset, simply returns an error HTTP status. (<code>res.status(err.status||500).end();</code>)
              <!--begin::Code-->
              <div class="pt-3">
                <!--begin::Highlight-->
                <div class="highlight">
                  <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                  <div class="highlight-code">
                    <pre class="language-javascript"><code class="language-javascript">hook_handle_error: (err, req, res, next) =&gt; {
  if (err.status === 404)
    // If the URL cannot be found, a 404 error screen (views/error-404.hbs) is displayed.
    res.render(&#039;error-404&#039;);
  else
    // For other errors, unknown error screen (views/error-unknown.hbs) is displayed.
    res.render(&#039;error-unknown&#039;);
},</code></pre>
                  </div>
                </div>
                <!--end::Highlight-->
              </div>
              <!--end::Code-->
            </td>
          </tr>
        </tbody>
        <!--end::Body-->
      </table>
      <!--end::Table-->
    </div>
    <!--end::Table wrapper-->
  </div>
  <!--end::Block-->
</div>
<!--end::Section-->