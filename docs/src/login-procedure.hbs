{{!< default}}
{{#contentFor 'title'}}Login Procedure{{/contentFor}}
{{#contentFor 'style'}}
<style>
/*Hide side navigation*/
#kt_app_sidebar_navs {
  display: none;
}
</style>
{{/contentFor}}
<!--begin::Section-->
<div class="pb-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5">Login Procedure</h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">
    To authenticate the request, call <code>express-sweet.services.Authentication.authenticate()</code> method.<br>
    This method returns <code>true</code> if the authentication succeeds and <code>false</code> if it fails.<br>
    If authentication succeeds, the next handler will be invoked and the <code>req.user</code> property will be set to the authenticated user.<br><br>
    The post-authentication logic depends on whether the login request is received asynchronously or synchronously, so an example of both logics is shown here.
  </div>
  <!--end::Block-->
  <!--begin::List-->
  <ol class="py-5">
    <li class="py-2">
      Create a user table to authenticate.
      <!--begin::Code-->
      <div class="pt-3">
        <!--begin::Highlight-->
        <div class="highlight">
          <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
          <div class="highlight-code">
            <pre class="language-sql"><code class="language-sql">CREATE TABLE `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(100) NOT NULL,
  `icon` varchar(768) NOT NULL DEFAULT MD5(RAND()),
  `created` datetime NOT NULL DEFAULT current_timestamp(),
  `modified` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `ukUserEmail` (`email`),
  UNIQUE KEY `ukUserIcon`(`icon`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre>
          </div>
        </div>
        <!--end::Highlight-->
      </div>
      <!--end::Code-->
    </li>
    <li class="py-2">
      Set the email address and password columns of the user table to be used for authentication in the config file <code>config/authentication.js</code>.
      <!--begin::Code-->
      <div class="pt-3">
        <!--begin::Highlight-->
        <div class="highlight">
          <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
          <div class="highlight-code">
            <pre class="language-javascript"><code class="language-javascript">/**
 * Authentication user ID field name, defaults to `username`.
 * @type {string}
 */
username: 'email',

/**
 * Authentication password field name, defaults to `password`.
 * @type {string}
 */
password: 'password'</code></pre>
          </div>
        </div>
        <!--end::Highlight-->
      </div>
      <!--end::Code-->
    </li>
    <li class="py-2">
      For asynchronous requests.<br>
      Returns the authentication result and executes subsequent processing on the front end.<br><br>
      When the form submits, it sends a login request (/api/users/login), and the <code>routes/api/user.js</code> router receives the request, authenticates it based on the username and password, and returns the result.<br>
      After that, the front end checks the authentication result returned from the router and redirects to  <code>/</code> if the authentication result is successful (<code>true</code>).<br>
      If you redirect to <code>/</code>, the page will automatically switch to the URL specified in <code>success_redirect</code> of <code>config/authentication.js</code>.
      <!--begin::Code-->
      <div class="pt-3">
        <!--begin::Highlight-->
        <div class="highlight">
          <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
          <ul class="nav nav-pills" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" data-bs-toggle="tab" href="#async-login-esm-tab" role="tab">ESM</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" href="#async-login-cjs-tab" role="tab">CJS</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" href="#async-login-html-tab" role="tab">HTML</a>
            </li>
          </ul>
          <div class="tab-content">
            <div class="tab-pane fade show active" id="async-login-esm-tab" role="tabpanel">
              <div class="highlight-code">
                <pre class="language-javascript"><code class="language-javascript">import {Router} from 'express';
import * as expressExtension from 'express-sweet';

const router = Router();
router.post('/login', async (req, res, next) =&gt; {
  const isAuth = await expressExtension.services.Authentication.authenticate(req, res, next);
  res.json(isAuth);
});
export default router;</code></pre>
              </div>
            </div>
            <div class="tab-pane fade" id="async-login-cjs-tab" role="tabpanel">
              <div class="highlight-code">
                <pre class="language-javascript"><code class="language-javascript">const express = require('express');
const expressExtension = require('express-sweet');

const router = express.Router();
router.post('/login', async (req, res, next) =&gt; {
  const isAuth = await expressExtension.services.Authentication.authenticate(req, res, next);
  res.json(isAuth);
});
module.exports = router;</code></pre>
              </div>
            </div>
            <div class="tab-pane fade" id="async-login-html-tab" role="tabpanel">
              <div class="highlight-code">
                <pre class="language-html"><code class="language-html">&lt;form id="form"&gt;
  &lt;label&gt;Email&lt;/label&gt;&lt;input type="email" name="email" required autofocus&gt;
  &lt;label class="form-label"&gt;Password&lt;/label&gt;&lt;input type="password" name="password" required&gt;
  &lt;button type="submit"&gt;Login&lt;/button&gt;
&lt;/form&gt;

&lt;script&gt;
const form = document.querySelector('#form');
form.addEventListener('submit', async event =&gt; {
  event.preventDefault();

  // Send an authentication request.
  const res = await fetch('/api/users/login', {method: 'POST', body: new FormData(form)});
  const isAuth = await res.json();

  // If login fails.
  if (!isAuth)
    return void alert('The user name or password is incorrect.');

  // After logging in successfully, you will be taken to the top page.
  location.href = '/';
});
&lt;/script&gt;</code></pre>
              </div>
            </div>
          </div>
        </div>
        <!--end::Highlight-->
      </div>
      <!--end::Code-->
    </li>
    <li class="py-2">
      For sync request.<br>
      If the authentication is successful, redirect to the page with the URL specified by <code>success_redirect</code> in <code>config/authentication.js</code>.<br>
      If it fails, redirect to the page with the URL specified by <code>failure_redirect</code> in <code>config/authentication.js</code>.
      <!--begin::Code-->
      <div class="pt-3">
        <!--begin::Highlight-->
        <div class="highlight">
          <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
          <ul class="nav nav-pills" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" data-bs-toggle="tab" href="#sync-login-esm-tab" role="tab">ESM</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" href="#sync-login-cjs-tab" role="tab">CJS</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" href="#sync-login-html-tab" role="tab">HTML</a>
            </li>
          </ul>
          <div class="tab-content">
            <div class="tab-pane fade show active" id="sync-login-esm-tab" role="tabpanel">
              <div class="highlight-code">
                <pre class="language-javascript"><code class="language-javascript">import {Router} from 'express';
import * as expressExtension from 'express-sweet';

const router = Router();
router.post('/login', async (req, res, next) =&gt; {
  const isAuth = await expressExtension.services.Authentication.authenticate(req, res, next);
  if (isAuth) 
    await expressExtension.services.Authentication.successRedirect(res);
  else
    await expressExtension.services.Authentication.failureRedirect(req, res);
});
export default router;</code></pre>
              </div>
            </div>
            <div class="tab-pane fade" id="sync-login-cjs-tab" role="tabpanel">
              <div class="highlight-code">
                <pre class="language-javascript"><code class="language-javascript">const express = require('express');
const expressExtension = require('express-sweet');

const router = express.Router();
router.post('/login', async (req, res, next) =&gt; {
  const isAuth = await expressExtension.services.Authentication.authenticate(req, res, next);
  if (isAuth) 
    await expressExtension.services.Authentication.successRedirect(res);
  else
    await expressExtension.services.Authentication.failureRedirect(req, res);
});
module.exports = router;</code></pre>
              </div>
            </div>
            <div class="tab-pane fade" id="sync-login-html-tab" role="tabpanel">
              <div class="highlight-code">
                <pre class="language-html"><code class="language-html">&lt;form method="post" action="/api/users/login"&gt;
  &lt;label&gt;Email&lt;/label&gt;&lt;input type="email" name="email" required autofocus&gt;
  &lt;label class="form-label"&gt;Password&lt;/label&gt;&lt;input type="password" name="password" required&gt;
  &lt;button type="submit"&gt;Login&lt;/button&gt;
&lt;/form&gt;</code></pre>
              </div>
            </div>
          </div>
        </div>
        <!--end::Highlight-->
      </div>
      <!--end::Code-->
    </li>
  </ol>
  <!--end::List-->
</div>
<!--end::Section-->